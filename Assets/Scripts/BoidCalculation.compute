// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateBoid
#pragma kernel UpdatePredator

struct Boid 
{
	float3 position;
	float3 velocity;
	float3 acceleration;
	float mass;
	uint type;
	float padding;
};

RWStructuredBuffer<Boid> boids;

RWStructuredBuffer<Boid> predators;

struct ForceField
{
	float3 position;
	float force;
};

RWStructuredBuffer<ForceField> forceFields;

RWStructuredBuffer<float3> foods;

float deltaTime;

float alignmentForceFactor;
float cohesionForceFactor;
float separationForceFactor;
float fleeForceFactor;
float pursuitForceFactor;
float foodForceFactor;
float speedForceFactor;
float boundsForceFactor;
float dragCoefficient;
float forceFieldFallofExponent;
float pursueOffset;

float alignmentDistance;
float cohesionDistance;
float separationDistance;
float fleeDistance;
float pursuitDistance;
float foodDistance;
float boundsDistance;

float3 simulationCenter;
float3 simulationSize;

float minSpeed;
float maxSpeed;

inline void SetForce(inout Boid boid, float3 force);
inline void TimeStep(inout Boid boid);
float3 GetFlockingForces(uint id);
float3 GetFleeForce(uint id);
float3 GetPursuitForce(uint id);
float3 GetFoodForce(uint id);
float3 GetSpeedForces(Boid boid);
float3 GetBoundsForce(Boid boid);
float3 GetForceFieldForces(Boid boid);
inline float3 GetSteeringForce(float3 desiredVelocity, Boid boid);
inline float3 GetSeekingForce(float3 desiredPosition, Boid boid);
inline float3 GetPursuingForce(float3 target, float3 tagetVelocity, Boid boid);
inline float3 GetFleeingForce(float3 notDesiredPosition, Boid boid);

[numthreads(1024, 1, 1)]
void UpdateBoid (uint3 id : SV_DispatchThreadID)
{
	float3 linearDrag = dragCoefficient * boids[id.x].velocity;
	float3 force = GetFlockingForces(id.x) + GetFleeForce(id.x) + GetFoodForce(id.x) + GetForceFieldForces(boids[id.x]) + GetSpeedForces(boids[id.x]) + GetBoundsForce(boids[id.x]) + linearDrag;
	SetForce(boids[id.x], force);
	TimeStep(boids[id.x]);
}

[numthreads(16, 1, 1)]
void UpdatePredator(uint3 id : SV_DispatchThreadID)
{
	float3 linearDrag = dragCoefficient * predators[id.x].velocity;
	float3 force = GetPursuitForce(id.x) + GetForceFieldForces(predators[id.x]) + GetSpeedForces(predators[id.x]) + GetBoundsForce(predators[id.x]) + linearDrag;
	SetForce(predators[id.x], force);
	TimeStep(predators[id.x]);
}

inline void SetForce(inout Boid boid, float3 force)
{
	boid.acceleration = force / boid.mass;
}

inline void TimeStep(inout Boid boid)
{
	boid.velocity += deltaTime * boid.acceleration;
	boid.position += 0.5f*boid.acceleration*deltaTime*deltaTime + boid.velocity*deltaTime;
}

float3 GetFlockingForces(uint id)
{
	uint boidsCount;
	uint stride;
	boids.GetDimensions(boidsCount, stride);

	float3 averagePosition = float3(0.0f, 0.0f, 0.0f);
	float3 averageVelocity = float3(0.0f, 0.0f, 0.0f);
	float3 separationForce = float3(0.0f, 0.0f, 0.0f);

	uint neighbourCount = 0;
	for (uint i = 0; i < boidsCount; i++)
	{
		float neighbourDistance = max(alignmentDistance, max(cohesionDistance, separationDistance));
		float distance = length(boids[i].position - boids[id].position);
		if (distance <= neighbourDistance)
		{
			if (distance < alignmentDistance)
				averageVelocity += boids[i].velocity;

			if (distance < cohesionDistance)
				averagePosition += boids[i].position;

			if (distance < separationDistance && id != i)
				separationForce += (separationDistance - distance) * (boids[id].position - boids[i].position) / distance;

			neighbourCount++;
		}
	}
	averageVelocity /= neighbourCount;
	averagePosition /= neighbourCount;

	float3 alignmentForce = alignmentForceFactor * GetSteeringForce(averageVelocity, boids[id.x]);
	float3 cohesionForce = cohesionForceFactor * (averagePosition - boids[id.x].position);
	//float3 cohesionForce = cohesionForceFactor * GetSeekingForce(averagePosition, boids[id.x]);
	separationForce *= separationForceFactor;
	
	return alignmentForce + cohesionForce + separationForce;
}

float3 GetFleeForce(uint id)
{
	uint predatorsCount;
	uint stride;
	predators.GetDimensions(predatorsCount, stride);

	uint nearbyPredatorsCount = 0;
	float3 averagePosition = float3(0.0f, 0.0f, 0.0f);
	for (uint i = 0; i < predatorsCount; i++)
	{
		float distance = length(boids[id].position - predators[i].position);
		if (distance < fleeDistance)
		{
			averagePosition += predators[i].position;
			nearbyPredatorsCount++;
		}
	}

	if (nearbyPredatorsCount > 0) 
	{
		averagePosition /= nearbyPredatorsCount;
		return fleeForceFactor * GetFleeingForce(averagePosition, boids[id]); //
	}
	return float3(0.0f, 0.0f, 0.0f);
}

float3 GetPursuitForce(uint id)
{
	uint boidsCount;
	uint stride;
	boids.GetDimensions(boidsCount, stride);

	uint nearbyPreyCount = 0;
	float3 averagePosition = float3(0.0f, 0.0f, 0.0f);
	float3 averageVelocity = float3(0.0f, 0.0f, 0.0f);
	for (uint i = 0; i < boidsCount; i++)
	{
		float distance = length(boids[i].position - predators[id].position);
		if (distance < pursuitDistance)
		{
			averagePosition += boids[i].position;
			averageVelocity += boids[i].velocity;
			nearbyPreyCount++;
		}
	}
	
	if (nearbyPreyCount > 0)
	{
		averagePosition /= nearbyPreyCount;
		averageVelocity /= nearbyPreyCount;
		return pursuitForceFactor * GetPursuingForce(averagePosition, averageVelocity, predators[id]);
	}
	return float3(0.0f, 0.0f, 0.0f);
}

float3 GetFoodForce(uint id)
{
	uint foodsCount;
	uint stride;
	foods.GetDimensions(foodsCount, stride);

	float closestDistance = foodDistance;
	float3 closest = float3(0.0f, 0.0f, 0.0f);
	for (uint i = 0; i < foodsCount; i++)
	{
		float distance = length(foods[i] - boids[id].position);
		if (distance < closestDistance)
		{
			closestDistance = distance;
			closest = foods[i];
		}
	}

	if (closestDistance < foodDistance)
		return foodForceFactor * GetSeekingForce(closest, boids[id]);
	return float3(0.0f, 0.0f, 0.0f);
}

float3 GetSpeedForces(Boid boid)
{
	float velocityNorm = length(boid.velocity);

	if (velocityNorm > maxSpeed)
		return -20.0f * speedForceFactor * (velocityNorm - maxSpeed) * (boid.velocity / velocityNorm);
	else if (velocityNorm < minSpeed)
		return 5.0f * speedForceFactor * (minSpeed - velocityNorm) * (boid.velocity / velocityNorm);
	else return float3(0.0f, 0.0f, 0.0f);
}

float3 GetBoundsForce(Boid boid)
{
	float3 desiredVelocity = boid.velocity;

	float3 x = boid.position - simulationCenter;
	float3 minCorner = x + simulationSize / 2;
	float3 maxCorner = simulationSize / 2 - x;

	[unroll(3)]
	for (uint i = 0; i < 3; i++)
	{
		if (minCorner[i] < boundsDistance)
			desiredVelocity[i] = maxSpeed;
		else if (maxCorner[i] < boundsDistance)
			desiredVelocity[i] = -maxSpeed;
	}
	return boundsForceFactor*GetSteeringForce(desiredVelocity, boid);
}

float3 GetForceFieldForces(Boid boid)
{
	uint fieldsCount;
	uint stride;
	forceFields.GetDimensions(fieldsCount, stride);

	float3 result = float3(0.0f, 0.0f, 0.0f);
	for (uint i = 0; i < fieldsCount; i++)
	{
		float distance = length(forceFields[i].position - boid.position);
		if (distance >= 1)
			result += forceFields[i].force * boid.mass / (pow(distance, forceFieldFallofExponent)) * normalize(forceFields[i].position - boid.position);
	}
	return result;
}

inline float3 GetSteeringForce(float3 desiredVelocity, Boid boid) 
{
	return desiredVelocity - boid.velocity;
}

inline float3 GetSeekingForce(float3 desiredPosition, Boid boid)
{
	float3 desiredVelocity = maxSpeed * normalize(desiredPosition - boid.position);
	return GetSteeringForce(desiredVelocity, boid);
}

inline float3 GetPursuingForce(float3 target, float3 tagetVelocity, Boid boid)
{
	float3 direction = normalize(tagetVelocity);
	return GetSeekingForce(target + pursueOffset*direction, boid);
}

inline float3 GetFleeingForce(float3 notDesiredPosition, Boid boid)
{
	return -GetSeekingForce(notDesiredPosition, boid);
}
