// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateBoid

struct Boid 
{
	float3 position;
	float3 velocity;
	float3 acceleration;
};

RWStructuredBuffer<Boid> boids;

float deltaTime;

float alignmentForceFactor;
float cohesionForceFactor;
float separationForceFactor;
float boundsForceFactor;

float alignmentDistance;
float cohesionDistance;
float separationDistance;
float3 simulationCenter;
float simulationRadius;

float minVelocity;
float maxVelocity;

float3 CalculateFlockingForces(uint id);
float3 CalculateSpeedForces(uint id);

[numthreads(1024, 1, 1)]
void UpdateBoid (uint3 id : SV_DispatchThreadID)
{
	float3 boundsForce = -boundsForceFactor * max(0, (length(boids[id.x].position - simulationCenter) - simulationRadius)) * (boids[id.x].position - simulationCenter);
	
	float3 linearDrag = -0.05f * boids[id.x].velocity; //
	
	float mass = 1.0f;
	boids[id.x].acceleration = (CalculateFlockingForces(id.x) + CalculateSpeedForces(id.x) + boundsForce + linearDrag) / mass;
	boids[id.x].velocity += deltaTime * boids[id.x].acceleration;
	boids[id.x].position += 0.5f*boids[id.x].acceleration*deltaTime*deltaTime + boids[id.x].velocity*deltaTime;
}

float3 CalculateFlockingForces(uint id)
{
	uint boidsCount;
	uint stride;
	boids.GetDimensions(boidsCount, stride);

	float3 averagePosition = float3(0.0f, 0.0f, 0.0f);
	float3 averageVelocity = float3(0.0f, 0.0f, 0.0f);
	float3 separationForce = float3(0.0f, 0.0f, 0.0f);

	uint neighbourCount = 0;
	for (uint i = 0; i < boidsCount; i++)
	{
		float neighbourDistance = max(alignmentDistance, max(cohesionDistance, separationDistance));
		float distance = length(boids[i].position - boids[id].position);
		if (distance <= neighbourDistance)
		{
			if (distance < alignmentDistance)
				averageVelocity += boids[i].velocity;

			if (distance < cohesionDistance)
				averagePosition += boids[i].position;

			if (distance < separationDistance && id != i)
				separationForce += (separationDistance - distance) * (boids[id].position - boids[i].position) / distance;

			neighbourCount++;
		}
	}
	averageVelocity /= neighbourCount;
	averagePosition /= neighbourCount;

	float3 alignmentForce = alignmentForceFactor * (averageVelocity - boids[id.x].velocity);
	float3 cohesionForce = cohesionForceFactor * (averagePosition - boids[id.x].position);
	separationForce *= separationForceFactor;

	return alignmentForce + cohesionForce + separationForce;
}

float3 CalculateSpeedForces(uint id) {
	float velocityNorm = length(boids[id.x].velocity);

	if (velocityNorm > maxVelocity)
		return -20.0f * (boids[id.x].velocity - maxVelocity) * (boids[id.x].velocity / velocityNorm); //
	else if (velocityNorm < minVelocity)
		return 5.0f * (minVelocity - boids[id.x].velocity) * (boids[id.x].velocity / velocityNorm); //
	else return float3(0.0f, 0.0f, 0.0f);
}